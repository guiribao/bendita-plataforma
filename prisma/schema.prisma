// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Usuario {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  senha         String   @db.VarChar(100)
  papel         Papel    @default(USUARIO)
  criado_em     DateTime @default(now()) @db.Timestamptz()
  atualizado_em DateTime @updatedAt @db.Timestamptz()
  perfil        Perfil?
}

model Usuario_Esqueci_Senha {
  id            Int      @id @default(autoincrement())
  usuarioId     Int
  token         String   @unique @default(uuid())
  ativo         Boolean  @default(true)
  valido_ate    DateTime @default(now()) @db.Timestamptz()
  criado_em     DateTime @default(now()) @db.Timestamptz()
  atualizado_em DateTime @updatedAt @db.Timestamptz()
}

enum Papel {
  ADMIN
  USUARIO
  FEIRANTE
}

model Perfil {
  id                    Int               @id @default(autoincrement())
  // INFORMAÇÕES BASICAS
  nome                  String
  sobrenome             String
  data_nascimento       DateTime?         @db.Date
  hora_nascimento       String?           @db.VarChar(10)
  cidade_nascimento     String?
  estado_nascimento     String?
  estado_civil          EstadoCivil?
  nome_conjuge          String?
  rg                    String?           @db.VarChar(15)
  cpf                   String?           @db.VarChar(15)
  email                 String?
  celular               String?
  telefone_fixo         String?
  cep                   String?
  endereco              String?
  numero                String?
  complemento           String?
  bairro                String?
  cidade                String?
  estado                String?
  nome_referencia       String?
  email_referencia      String?
  telefone_referencia   String?
  endereco_referencia   String?
  parentesco_referencia String?
  grupo                 Grupo             @default(VISITANTE)
  membro                Boolean           @default(false)
  data_fardamento       DateTime?         @db.Date
  local_fardamento      String?
  foto                  String            @default("user.png") @db.VarChar(200)
  bio                   String?           @db.Text
  profissao             String?
  escolaridade          Escolaridade?
  medicacao_controlada  Boolean           @default(false)
  nome_medicacao        String?
  quadro_saude          String?
  autorizacao_medico    Boolean?
  primeira_vez          Boolean           @default(true)
  usuario               Usuario?          @relation(fields: [usuarioId], references: [id])
  usuarioId             Int?              @unique
  criado_em             DateTime          @default(now()) @db.Timestamptz()
  atualizado_em         DateTime          @updatedAt @db.Timestamptz()
  Ref_operacao          Operacao[]        @relation("Ref_operacao")
  Operacao              Operacao[]        @relation("Operacao")
  Evento_Feirante       Evento_Feirante[]
  nome_banca            String?           @db.VarChar(200)
  logo_banca            String?           @db.VarChar(200)
}

model Filhos {
  id            Int @id @default(autoincrement())
  perfilPaiId   Int
  perfilFilhoId Int
}

model Operacao {
  id                Int                @id @default(autoincrement())
  // Geral
  tipo              TipoOperacao       @default(ENTRADA)
  finalidade        FinalidadeOperacao @default(NAO_ESPECIFICADO)
  forma_pagamento   FormaPagamento     @default(NAO_ESPECIFICADO)
  valor             Decimal            @db.Money
  criado_em         DateTime           @default(now()) @db.Timestamptz()
  criado_por_perfil Perfil             @relation("Operacao", fields: [criado_por], references: [id], onDelete: Restrict)
  criado_por        Int
  evento            Eventos?           @relation(fields: [eventoId], references: [id], onDelete: SetNull)
  eventoId          Int?
  // Operação
  descricao         String?            @db.VarChar(200)
  perfil            Perfil?            @relation("Ref_operacao", fields: [perfilId], references: [id], onDelete: SetNull)
  perfilId          Int?
  // Operação feira
  feirante          Evento_Feirante?   @relation(fields: [feiranteId], references: [id], onDelete: Cascade)
  feiranteId        Int?
  produto           String?
  nome_cliente      String?
  observacao        String?

  @@index([perfilId])
  @@index([eventoId])
  @@index([feiranteId])
  @@index([criado_por])
}

model Eventos {
  id               Int               @id @default(autoincrement())
  titulo           String            @db.VarChar(200)
  descricao        String?
  tipo             TipoEvento
  vestimenta       TipoFarda
  trabalho_terco   Boolean           @default(false)
  trabalho_missa   Boolean           @default(false)
  trabalho_fechado Boolean           @default(false)
  data_hora        DateTime          @default(now()) @db.Timestamptz()
  criado_em        DateTime          @default(now()) @db.Timestamptz()
  atualizado_em    DateTime          @updatedAt @db.Timestamptz()
  Feirantes        Evento_Feirante[]
  Operacao         Operacao[]
}

model Evento_Feirante {
  id       Int        @id @default(autoincrement())
  evento   Eventos    @relation(fields: [eventoId], references: [id], onDelete: Cascade)
  eventoId Int
  perfil   Perfil     @relation(fields: [perfilId], references: [id], onDelete: Cascade)
  perfilId Int
  Operacao Operacao[]

  pagamento_banco     String @default("") @db.VarChar(64)
  pagamento_agencia   String @default("") @db.VarChar(16)
  pagamento_conta     String @default("") @db.VarChar(16)
  pagamento_chave_pix String @default("") @db.VarChar(64)

  caixa_aberto Boolean @default(true)

  @@unique([eventoId, perfilId])
  @@index([eventoId])
  @@index([perfilId])
}

enum FormaPagamento {
  PIX
  DINHEIRO
  CREDITO_AVISTA
  CREDITO_PARCELADO
  NEGOCIACAO
  NAO_ESPECIFICADO
}

enum FinalidadeOperacao {
  DOACAO
  CANTINA
  FEIRA
  NAO_ESPECIFICADO
}

// TO-DO: Entender questionarios (Anamnese e COVID)
// model Questionario {
//   id        Int                      @id @default(autoincrement())
//   nome      String                   @db.VarChar(200)
//   descricao String
//   criado_em DateTime                 @default(now()) @db.Timestamptz()
//   perguntas Questionario_Perguntas[]
// }
// model Questionario_Perguntas {
//   id             Int          @id @default(autoincrement())
//   pergunta       String       @db.VarChar(200)
//   criado_em      DateTime     @default(now()) @db.Timestamptz()
//   atualizado_em  DateTime     @updatedAt @db.Timestamptz()
//   questionario   Questionario @relation(fields: [questionarioId], references: [id])
//   questionarioId Int

//   @@index([questionarioId])
// }

model Logger {
  id        Int        @id @default(autoincrement())
  tipo_log  TipoLogger
  log       Json?
  criado_em DateTime   @default(now()) @db.Timestamptz()
}

// model Questionario_Respostas_Usuario {
//   id             Int @id @default(autoincrement())
//   respostas
//   questionarioId
//   perfilId
// }

enum TipoLogger {
  EMAIL
}

enum Grupo {
  FARDADO
  VISITANTE
}

enum EstadoCivil {
  SOLTEIRO
  CASADO
  VIUVO
  DIVORCIADO
}

enum Escolaridade {
  FUNDAMENTAL_INCOMPLETO
  FUNDAMENTAL_COMPLETO
  MEDIO_INCOMPLETO
  MEDIO_COMPLETO
  SUPERIOR_INCOMPLETO
  SUPERIOR_COMPLETO
  NAO_APLICA
}

enum TipoOperacao {
  ENTRADA
  SAIDA
}

enum TipoEvento {
  EVENTO
  FEIRA
  TRABALHO
  TREINAMENTO
}

enum TipoFarda {
  FARDA_AZUL
  FARDA_BRANCA
  ROUPA_BRANCA
  NAO_APLICA
}
